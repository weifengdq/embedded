/**
 * \file IfxGtm_Cmu.h
 * \brief GTM  basic functionality
 * \ingroup IfxLld_Gtm
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Gtm_Std_Cmu Cmu Basic Functionality
 * \ingroup IfxLld_Gtm_Std
 * \defgroup IfxLld_Gtm_Std_Cmu_CMUEnumerations CMU Enumerations
 * \ingroup IfxLld_Gtm_Std_Cmu
 * \defgroup IfxLld_Gtm_Std_Cmu_CMU_Basic_Functions CMU Basic Functions
 * \ingroup IfxLld_Gtm_Std_Cmu
 */

#ifndef IFXGTM_CMU_H
#define IFXGTM_CMU_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxGtm_cfg.h"

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Gtm_Std_Cmu_CMUEnumerations
 * \{ */
typedef enum
{
    IfxGtm_Cmu_Clk_0 = 0,
    IfxGtm_Cmu_Clk_1,
    IfxGtm_Cmu_Clk_2,
    IfxGtm_Cmu_Clk_3,
    IfxGtm_Cmu_Clk_4,
    IfxGtm_Cmu_Clk_5,
    IfxGtm_Cmu_Clk_6,
    IfxGtm_Cmu_Clk_7
} IfxGtm_Cmu_Clk;

typedef enum
{
    IfxGtm_Cmu_Eclk_0 = 0,
    IfxGtm_Cmu_Eclk_1,
    IfxGtm_Cmu_Eclk_2
} IfxGtm_Cmu_Eclk;

typedef enum
{
    IfxGtm_Cmu_Fxclk_0 = 0,
    IfxGtm_Cmu_Fxclk_1,
    IfxGtm_Cmu_Fxclk_2,
    IfxGtm_Cmu_Fxclk_3,
    IfxGtm_Cmu_Fxclk_4
} IfxGtm_Cmu_Fxclk;

/** \brief Tim Filter counter frequency select
 */
typedef enum
{
    IfxGtm_Cmu_Tim_Filter_Clk_0,  /**< \brief FLT_CNT counts with CMU_CLK0 */
    IfxGtm_Cmu_Tim_Filter_Clk_1,  /**< \brief FLT_CNT counts with CMU_CLK1 */
    IfxGtm_Cmu_Tim_Filter_Clk_6,  /**< \brief FLT_CNT counts with CMU_CLK6 */
    IfxGtm_Cmu_Tim_Filter_Clk_7   /**< \brief FLT_CNT counts with CMU_CLK7 */
} IfxGtm_Cmu_Tim_Filter_Clk;

/** \} */

/** \addtogroup IfxLld_Gtm_Std_Cmu_CMU_Basic_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Enable or disable the configurable, fixed, and external clocks of the GTM module.
 *
 * \param[inout] gtm     Pointer to the GTM module instance to be configured.
 * \param[in]    clkMask Enable/disable mask. Range: 0x00000000 to 0x00FFFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Cmu_enableClocks(Ifx_GTM *gtm, uint32 clkMask);

/**
 * \brief Returns the GTM configurable clock frequency in Hz
 *
 * \param[in] gtm           Pointer to the GTM module instance.
 * \param[in] clkIndex      Index of the configurable clock to query. Range: \ref IfxGtm_Cmu_Clk
 * \param[in] assumeEnabled Boolean flag to control frequency calculation behavior.
 *                          - TRUE: Calculate frequency assuming the clock is enabled
 *                          - FALSE: Use actual clock state for calculation
 *
 * \retval float32 GTM configurable clock frequency in Hz
 */
IFX_EXTERN float32 IfxGtm_Cmu_getClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, boolean assumeEnabled);

/**
 * \brief Gets the GTM external clock frequency in Hz
 *
 * \param[in] gtm           Pointer to the GTM module instance.
 * \param[in] clkIndex      Index of the external clock. Range: \ref IfxGtm_Cmu_Eclk
 * \param[in] assumeEnabled When TRUE, calculates the frequency as if the clock is enabled; when FALSE, uses the actual clock state
 *
 * \retval float32 GTM external clock frequency in Hz
 */
IFX_EXTERN float32 IfxGtm_Cmu_getEclkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Eclk clkIndex, boolean assumeEnabled);

/**
 * \brief Returns the GTM fixed clock frequency in Hz
 *
 * \param[in] gtm 			Pointer to the GTM module instance.
 * \param[in] clkIndex 		Index of the fixed clock to query. Range: \ref IfxGtm_Cmu_Fxclk
 * \param[in] assumeEnabled When TRUE, the function assumes the clock is enabled
 *                          for frequency calculation. When FALSE, the actual
 *                          clock state is considered.
 *
 * \retval float32 GTM fixed clock frequency in Hz
 */
IFX_EXTERN float32 IfxGtm_Cmu_getFxClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Fxclk clkIndex, boolean assumeEnabled);

/**
 * \brief Returns the GTM global clock frequency in Hz
 *
 * \param[in] gtm Pointer to the GTM module instance.
 *
 * \retval float32 GTM global clock frequency in Hz
 */
IFX_EXTERN float32 IfxGtm_Cmu_getGclkFrequency(Ifx_GTM *gtm);

/**
 * \brief Returns the CMU module frequency in Hz.
 * This function retrieves the frequency of the CMU module. For the GTM system clock frequency, use IfxGtm_getSysClkFrequency() instead.
 *
 * \param[in] gtm Pointer to the GTM module instance.
 *
 * \retval float32 The CMU module frequency in Hz.
 */
IFX_EXTERN float32 IfxGtm_Cmu_getModuleFrequency(Ifx_GTM *gtm);

/**
 * \brief Checks if the specified configurable clock is enabled
 *
 * \param[in] gtm      Pointer to the GTM module instance.
 * \param[in] clkIndex Index of the configurable clock to check. Range: \ref IfxGtm_Cmu_Clk
 *
 * \retval TRUE If the clock is enabled.
 *         FALSE If the clock is disabled.
 */
IFX_EXTERN boolean IfxGtm_Cmu_isClkClockEnabled(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex);

/**
 * \brief Checks if a specific external clock is enabled.
 *
 * \param[in] gtm      Pointer to the GTM module instance.
 * \param[in] clkIndex Index of the external clock to check. Range: \ref IfxGtm_Cmu_Eclk
 *
 * \retval TRUE If the specified external clock is enabled.
 *         FALSE If the specified external clock is disabled.
 */
IFX_EXTERN boolean IfxGtm_Cmu_isEclkClockEnabled(Ifx_GTM *gtm, IfxGtm_Cmu_Eclk clkIndex);

/**
 * \brief Checks if the fixed clock is enabled for the GTM module.
 *
 * \param gtm [in] Pointer to the GTM module instance.
 *
 * \retval TRUE If the fixed clock is enabled.
 *         FALSE If the fixed clock is disabled.
 */
IFX_EXTERN boolean IfxGtm_Cmu_isFxClockEnabled(Ifx_GTM *gtm);

/**
 * \brief Select the clock input for CLK6 and CLK7.
 * 
 * \note The frequency can only be modified when the corresponding clock is disabled using IfxGtm_Cmu_enableClocks()
 *
 * \param[inout] gtm    Pointer to the GTM module instance.
 * \param[in] clkIndex  Index of the configurable clock to be configured. Range: \ref IfxGtm_Cmu_Clk
 * \param[in] useGlobal Boolean flag to select the input source:
 *                      - TRUE: Use the global clock as input.
 *                      - FALSE: Use the SUB_INC as input.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Cmu_selectClkInput(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, boolean useGlobal);

/**
 * \brief Configures the specified GTM configurable clock with the desired frequency in Hz.
 *
 * \param[inout] gtm       Pointer to the GTM module instance.
 * \param[in]    clkIndex  Index of the configurable clock to set. Range: \ref IfxGtm_Cmu_Clk
 * \param[in]    frequency Frequency in Hz for the selected configurable clock.
 *                         Range: Must be a positive value (frequency > 0).
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Cmu_setClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, float32 frequency);

/** \brief Configures the GTM external clock frequency in Hz.
 *
 * \param[inout] gtm       Pointer to the GTM module instance.
 * \param[in]    clkIndex  Index of the external clock to set. Range: \ref IfxGtm_Cmu_Clk
 * \param[in]    frequency Frequency in Hz. Range: Must be a positive value (frequency > 0).
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Cmu_setEclkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Eclk clkIndex, float32 frequency);

/**
 * \brief Configures the GTM global clock frequency in Hz.
 *
 * \param[inout] gtm       Pointer to the GTM module instance.
 * \param[in]    frequency Frequency in Hz to be set for the global clock. Range: Must be a positive value (frequency > 0).
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Cmu_setGclkFrequency(Ifx_GTM *gtm, float32 frequency);

/** \} */

#endif /* IFXGTM_CMU_H */
