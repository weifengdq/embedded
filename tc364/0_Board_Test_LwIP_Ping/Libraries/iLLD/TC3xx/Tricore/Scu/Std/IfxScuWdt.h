/**
 * \file IfxScuWdt.h
 * \brief SCU  basic functionality
 * \ingroup IfxLld_Scu
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * This file contains the APIs for SCU Watchdog and Endinit related functions.
 *
 * \defgroup IfxLld_Scu SCU
 * \addtogroup IfxLld_Scu
 * \{
 * \defgroup IfxLld_ScuWdt How to use the Scu Wdt driver?
 * \addtogroup IfxLld_ScuWdt
 * \{
 *
 * The SCU Watchdog Timer (WDT) driver provides functionality to configure and manage the CPU and Safety Watchdog Timers.
 * It allows enabling, disabling, servicing, and configuring the watchdog timers to ensure system stability and prevent unintended resets.
 *
 * \section IfxLld_ScuWdt_Std_Preparation Preparation
 * \subsection IfxLld_ScuWdt_Std_Include Include Files
 *
 * Include following header file into your C code:
 * \code
 * #include <Scu/Std/IfxScuWdt.h>
 * \endcode
 *
 * \subsection IfxLld_ScuWdt_Std_Macros Macros
 *
 * Defines macros for the Safety Watchdog Timer (WDT) configuration.
 * REL_VAL: Specifies the reload value for the extended timeout window.
 * WAIT_TIME: Specifies the wait time in milliseconds.
 *
 * \code
 * #define REL_VAL     0xE000
 * #define WAIT_TIME   1000
 * \endcode
 *
 * \subsection IfxLld_ScuWdt_Std_Variables Variables
 *
 * Configuration structure instance for the SCU Watchdog. This structure is used to configure the CPU and Safety Watchdog Timer (WDT) settings,
 * such as password, reload value, input frequency, and various control options.
 *
 * \code
 * // Used globally
 * IfxScuWdt_Config scuWdtConfig;
 *
 * // Used locally
 * Ifx_SCU_WDTCPU *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];  // Pointer to the Safety Watchdog Timer (WDT) module
 * \endcode
 *
 * \subsection IfxLld_ScuWdt_Std_Init Module Initialisation
 *
 * The module initialisation can be done in the same function. Here is an example:
 *
 * \code
 * IfxScuWdt_initConfig(&scuWdtConfig);
 * IfxScuWdt_initCpuWatchdog(watchdog,&scuWdtConfig);
 *
 * // Comment out the instruction to disable the CPU watchdog (IfxScuWdt_disableCpuWatchdog()). Thus the CPU0 watchdog remains on and needs to be serviced.
 * //IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
 * IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
 *
 * // Wait for CPU sync event
 * IfxCpu_emitEvent(&g_cpuSyncEvent);
 * IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
 *
 * // Initialize a time variable
 * Ifx_TickTime ticksFor1s = IfxStm_getTicksFromMilliseconds(BSP_DEFAULT_TIMER, WAIT_TIME);
 *
 * while(1)
 * {
 *	   IfxScuWdt_serviceCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());  // Continuously service CPU0WDT
 *	   wait(ticksFor1s);												  // Wait for one second
 * }
 * \endcode
 *
 * \}
 * \}
 *
 * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
 * \ingroup IfxLld_Scu_Std
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
 * \ingroup IfxLld_Scu_Std_Wdt
 */

#ifndef IFXSCUWDT_H
#define IFXSCUWDT_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxScu_cfg.h"
#include "Cpu/Std/Ifx_Types.h"
#include "IfxScu_reg.h"
#include "IfxScu_bf.h"
#include "IfxScuWdt.asm.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Endinit operation Timeout counter
 */
#define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief Configuration structure for Scu Watchdog.
 * IfxScuWdt_Config is a type describing configuration structure of CPU and
 * Safety WDT registers defined in IfxScuWdt.h file.
 */
typedef struct
{
    uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
    uint16            reload;                              /**< \brief WDT reload value */
    IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
    boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
    boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
    boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
    boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
    boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
    boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
    IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
} IfxScuWdt_Config;

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Initializes the SCUWDT configuration structure to default values.
 * 
 * This function acts as a constructor for the IfxScuWdt_Config structure,
 * setting it to software specific default values. These defaults are not necessarily the same
 * as hardware reset values.
 * 
 * \param[inout] config Pointer to the IfxScuWdt_Config structure to be initialized. The structure
 * 					    contains various configuration parameters for the Watchdog Timer, such as password, reload value,
 *                      input frequency, and control flags for different operating modes.
 * 
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);

/**
 * \brief Initializes an instance of the WDT Driver corresponding to the CPU WDT Hardware module.
 *
 * This function initializes the SCUWDT software driver and the corresponding CPU WDT hardware module.
 * It configures the watchdog with user defined settings such as password, timer period, and other control options.
 * This API is specific to one hardware module instance and must be called for each WDT hardware module used.
 *
 * \param[inout] wdt Reference to the register map of the CPU WDT hardware instance to be initialized.
 * \param[in] config Configuration structure containing watchdog settings such as password, reload value,
 * 					 input frequency, and control flags.
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);

/**
 * \brief Initializes an instance of the Safety Watchdog (WDT) driver and corresponding hardware module.
 *
 * This function configures the Safety WDT hardware module according to the provided configuration settings.
 * It initializes the watchdog with parameters such as password, reload value, input frequency,
 * and various control flags for enabling or disabling specific features like automatic password change,
 * timer checks, and SMU restrictions.
 *
 * \param[inout] wdt Reference to the register map of the Safety WDT hardware instance to be initialized.
 * \param[in] config Pointer to the configuration structure containing initialization parameters
 *                   such as password, reload value, input frequency, and control flags.
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Clears the Endinit bit for the CPU Watchdog Timer (WDT) hardware module.
 *
 * This inline API disables the Endinit functionality provided by the CPU WDT hardware module.
 * It is intended for use in startup routines where function calls are not possible.
 * The function must be called before modifying any Endinit protected register.
 * The Endinit bit must be set again using \ref IfxScuWdt_setCpuEndinitInline after this API is called.
 * The sequence of clearing and setting the Endinit bit must not be interrupted by other operations.
 * The password should be obtained using \ref IfxScuWdt_getCpuWatchdogPasswordInline and stored locally in the caller function.
 *
 * \param[inout] watchdog Pointer to the watchdog register map of the CPU WDT hardware instance.
 * \param[in] password    The existing (Application specific) password for the Watchdog module.
 *                        Range:n 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);

/**
 * \brief Clears the Global Safety Endinit password inline using the provided password.
 *
 * This inline API disables the Global Safety Endinit functionality provided by the Safety Watchdog Timer (WDT) hardware module.
 * The password should be obtained using \ref IfxScuWdt_getGlobalSafetyEndinitPasswordInline and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);

/**
 * \brief Clears the Endinit bit provided by the Safety WDT Hardware module.
 *
 * This inline API disables the Endinit functionality of the Safety WDT Hardware module.
 * It is intended for use in startup routines where function calls are not possible.
 * The function must be called before modifying any Endinit protected register.
 * The Endinit bit must be set again using \ref IfxScuWdt_setSafetyEndinitInline after this API is called.
 * The sequence of clearing and setting the Endinit bit must not be interrupted.
 * The password should be obtained using \ref IfxScuWdt_getSafetyWatchdogPasswordInline and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);

/**
 * \brief Fetches the current password for the Global Safety Endinit Watchdog module.
 *
 * This function retrieves the existing application specific Global Safety Endinit password for the Safety WDT Hardware module.
 * The password is required for most WDT APIs and can be stored locally or globally for later use.
 * It is intended for use in startup routines where function calls are not possible.
 *
 * \retval uint16 The existing (Application specific) password for the Watchdog module.
 */
IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);

/**
 * \brief SCUWDT Inline API to Set Endinit bit provided by CPU WDT Hardware module.
 *
 * This API enables the Endinit functionality provided by the CPU WDT Hardware module.
 * It is intended for use in startup routines where function calls are not possible.
 * The function must be called after modifying any Endinit protected registers.
 * The password should be obtained using \ref IfxScuWdt_getCpuWatchdogPasswordInline and stored locally in the caller function.
 *
 * \param[inout] watchdog Pointer to the watchdog register map of the CPU WDT hardware instance.
 * \param[in] password    The existing (Application specific) password for the Watchdog module.
 * 					      Range: 0x0000 to 0xFFFF
 * \retval None
 */
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);

/**
 * \brief Sets the Global Safety Endinit password for the Watchdog module (Inline)
 * 
 * This function updates the Global Safety Endinit password used by the Watchdog module.
 * The password is application specific and must be provided to authenticate the operation.
 * The password should be obtained using \ref IfxScuWdt_getGlobalSafetyEndinitPasswordInline and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 * 
 * \retval None
 */
IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);

/**
 * \brief SCUWDT Inline API to Set Endinit bit provided by Safety WDT Hardware module.
 *
 * This API enables the Endinit functionality provided by the Safety WDT Hardware module.
 * It is intended for use in startup routines where function calls are not possible.
 * The function must be called after modifying any Endinit protected register.
 * The password should be obtained using \ref IfxScuWdt_getSafetyWatchdogPasswordInline and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Clears the Endinit bit provided by the CPU WDT Hardware module.
 *
 * This function disables the Endinit functionality, allowing modification of Endinit protected registers.
 * The Endinit bit must be set again using \ref IfxScuWdt_setCpuEndinit after modifications are complete.
 * The clear and set sequence must not be interrupted by other operations.
 * The password should be obtained using \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);

/**
 * \brief Clears the Global Endinit bit provided by the CPU WDT Hardware module.
 *
 * This function disables the Global Endinit functionality provided by the CPU WDT Hardware module.
 * It is intended for use in startup routines where function calls are not possible.
 * The function must be called before modifying any Endinit protected registers.
 * The Endinit bit must be set afterward using the \ref IfxScuWdt_setGlobalEndinit function.
 * The clear and set sequence must not be interrupted by another interrupt or call.
 * The password must be obtained using the \ref IfxScuWdt_getGlobalEndinitPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);

/**
 * \brief Clears the Global Safety Endinit bit provided by the Safety WDT hardware module.
 *
 * This function disables the Global Safety Endinit functionality provided by the Safety WDT Hardware module.
 * It is intended to be used in startup routines where function calls are not possible.
 * The function must be called before modifying any Endinit protected registers.
 * The Endinit bit must be set afterward using the \ref IfxScuWdt_setGlobalSafetyEndinit function.
 * The clear and set sequence for the Endinit bit must not be interrupted by another interrupt or call.
 * The password must be obtained using the \ref IfxScuWdt_getGlobalSafetyEndinitPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);

/**
 * \brief Clears the Endinit bit provided by the Safety WDT Hardware module.
 *
 * This function disables the Endinit functionality provided by the Safety WDT Hardware module.
 * The function must be called before modifying any Endinit protected registers. 
 * The Endinit bit must be set using the \ref IfxScuWdt_setSafetyEndinit function.
 * The clear and set sequence for the Endinit bit must not be interrupted by another interrupt or call.
 * The password should be obtained using \ref IfxScuWdt_getSafetyWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);

/**
 * \brief Enables the Endinit functionality provided by the CPU WDT Hardware module.
 *
 * This function sets the Endinit bit, which should be called after modifying any Endinit protected register.
 * This password should be obtained using \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);

/**
 * \brief Enables the Global Endinit functionality provided by the CPU WDT Hardware module.
 *
 * This function sets the Global Endinit bit, which should be called after modifying any Endinit protected register.
 * The password must be obtained using the \ref IfxScuWdt_getGlobalEndinitPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);

/**
 * \brief Enables the Global Safety Endinit functionality provided by the Safety WDT Hardware module.
 *
 * This API allows the user to set the Global Safety Endinit bit after modifying any Endinit protected register.
 * The password must be obtained using the \ref IfxScuWdt_getGlobalSafetyEndinitPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);

/**
 * \brief Enables the Safety Endinit functionality provided by the Safety WDT Hardware module.
 *
 * This API enables the Safety Endinit functionality after modifying Endinit protected registers.
 * The password must be obtained using the \ref IfxScuWdt_getSafetyWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief SCUWDT Inline API to fetch the current password of the CPU Watchdog module.
 *
 * This inline API retrieves the current Watchdog password for the CPU WDT hardware module.
 * The password is required for most WDT APIs. It is typically used to store the password locally in
 * the caller function or in a global variable within the application memory.This API is specifically
 * designed for use in startup routines where function calls are not feasible.
 *
 * \param[in] watchdog Pointer to the watchdog register map of the CPU WDT hardware instance.
 *
 * \retval uint16 The current (application-specific) password for the Watchdog module.
 */
IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);

/**
 * \brief Retrieves the current Endinit status of the CPU Watchdog module.
 *
 * This inline function retrieves the Endinit status of the CPU Watchdog module.
 *
 * \param[in] watchdog Pointer to the watchdog register map of the CPU WDT hardware instance.
 *
 * \retval TRUE  Access to Endinit protected registers is permitted (default after ApplicationReset)(ENDINIT = 0)
 * \retval FALSE Access to Endinit protected registers is not permitted (ENDINIT = 1).
 */
IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);

/**
 * \brief Retrieves the current Safety Endinit status of Safety/System Watchdog module.
 *
 * This function retrieves the Safety Endinit status of the Safety Watchdog module.
 *
 * \retval TRUE  Access to Endinit protected registers is permitted (default after ApplicationReset)(ENDINIT = 0)
 * \retval FALSE Access to Endinit protected registers is not permitted (ENDINIT = 1).
 */
IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);

/**
 * \brief Fetches the current password for the Safety Watchdog module.
 *
 * This inline API retrieves the current password required for interacting with the Safety Watchdog (WDT) hardware module. 
 * The password is essential for most WDT related operations and can be stored locally or globally for application use.
 * This inline API is specifically designed for use in startup routines where standard function calls are not feasible.
 *
 * \retval uint16 The current password for the Safety Watchdog module.
 */
IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Changes the password for the CPU Watchdog module.
 *
 * This function updates the current password of the CPU Watchdog module to a new password.
 * The current password must be obtained using the \ref IfxScuWdt_getCpuWatchdogPassword to authenticate the change
 * and should also be stored locally in the caller function, and a new password must be specified.
 *
 * \param[in] password    The existing (Application specific) password for the Watchdog module.
 *            		      Range: 0x0000 to 0xFFFF
 * \param[in] newPassword The Application specific new password to be set for the Watchdog module.
 * 						  Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);

/**
 * \brief Changes the CPU Watchdog timer reload value.
 *
 * This function updates the reload value for the CPU Watchdog timer.
 * The new reload value will be used to reset the watchdog timer after each service.
 * The password must be obtained using the \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 * \param[in] reload   The new reload value for the Watchdog timer.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);

/**
 * \brief Changes the Global Endinit password for the Watchdog module.
 *
 * This function updates the password for the CPU Watchdog Timer (WDT) module.
 * The current password must be obtained using the \ref IfxScuWdt_getGlobalEndinitPassword to authenticate the change
 * and should also be stored locally in the caller function, and a new password must be specified.
 *
 * \param[in] password    The existing (Application specific) password for the Watchdog module.
 * 					      Range: 0x0000 to 0xFFFF
 * \param[in] newPassword The Application specific new password to be set for the Watchdog module.
 * 						  Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);

/**
 * \brief Changes the Global Safety Endinit password for the Safety WDT module.
 *
 * This function updates the password used for the Safety Watchdog Timer (WDT) module.
 * The current password must be obtained using the \ref IfxScuWdt_getGlobalSafetyEndinitPassword to authenticate the change
 * and should also be stored locally in the caller function, and a new password must be specified.
 *
 * \param[in] password    The existing (Application specific) password for the Global Safety WDT module.
 * 					      Range: 0x0000 to 0xFFFF
 * \param[in] newPassword The Application specific new password to be set for the Global Safety WDT module.
 * 						  Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);

/**
 * \brief Changes the password for the Safety Watchdog module.
 *
 * This function updates the Safety Watchdog password to a new value.
 * The current password must be obtained using the \ref IfxScuWdt_getSafetyWatchdogPassword to authenticate the change
 * and should also be stored locally in the caller function, and a new password must be specified.
 *
 * \param[in] password 	  The existing (Application specific) password for the Safety Watchdog module.
 * 					      Range: 0x0000 to 0xFFFF
 * \param[in] newPassword The Application specific new password to be set for the Safety Watchdog module.
 * 						  Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);

/**
 * \brief SCUWDT API to change Safety Watchdog timer reload value.
 *
 * This API updates the Watchdog timer reload value for the Safety Watchdog timer module. 
 * The Watchdog timerwill be reloaded with this new value after every service. 
 * The current password must be obtained using the \ref If IfxScuWdt_getSafetyWatchdogPassword to authenticate the change
 * and should also be stored locally in the caller function, and a new password must be specified.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *					   Range: 0x0000 to 0xFFFF
 * \param[in] reload   New reload value for the Safety Watchdog timer.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);

/**
 * \brief SCUWDT API to disable CPU Watchdog functionality.
 *
 * This API disables the Watchdog functionality of the CPU WDT hardware module,
 * stopping the Watchdog timers. 
 * The password must be obtained using the \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in the caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);

/**
 * \brief SCUWDT API to disable Safety Watchdog functionality.
 *
 * This API disables the Safety Watchdog functionality of the SCUWDT hardware module, stopping the Watchdog timers.
 * The password must be obtained using the \ref IfxScuWdt_getSafetyWatchdogPassword and stored locally in the caller function.
 * 
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);

/**
 * \brief SCUWDT API to enable CPU Watchdog functionality.
 *
 * This API enables the Watchdog functionality of the CPU WDT hardware module.
 * The Watchdog timers must be serviced periodically after calling this API.
 * The password must be obtained using \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 * 					   Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);

/**
 * \brief SCUWDT API to enable Safety Watchdog functionality.
 *
 * This API enables the Safety Watchdog functionality of the SCUWDT hardware module.
 * After calling this function, the watchdog timers must be serviced periodically to prevent a system reset.
 * The password must be obtained using \ref IfxScuWdt_getSafetyWatchdogPassword and stored locally in caller function.
 *
 * \param[in] password The existing (Application specific) password for the Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);

/**
 * \brief SCUWDT API to fetch the current password of the CPU Watchdog module.
 *
 * This API retrieves the current Watchdog password for the CPU WDT Hardware module.
 * The password is required for most Watchdog timer (WDT) APIs and can be stored locally in the caller function
 * or in a global variable in the application memory.
 *
 * \retval uint16 The current (application-specific) password for the Watchdog module.
 */
IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);

/**
 * \brief Retrieves the current Endinit status of the CPU Watchdog module.
 * 
 * This function retrieves the Endinit status of the CPU Watchdog module.
 *
 * \retval TRUE  Access to Endinit protected registers is permitted (default after ApplicationReset)(ENDINIT = 0).
 * \retval FALSE Access to Endinit protected registers is not permitted (ENDINIT = 1).
 */
IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);

/**
 * \brief Fetches the current password of the Global Endinit Watchdog module.
 *
 * This function retrieves the existing application specific password for the Global Endinit Watchdog module,
 * which is required for most Watchdog timer (WDT) APIs. It is intended for use in startup routines where
 * function calls are not possible.
 *
 * \retval uint16 The existing (Application specific) password for the Watchdog module.
 */
IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);

/**
 * \brief Fetches the current password of the Global Safety Endinit Watchdog module.
 *
 * This function retrieves the current Global Endinit password for the Safety WDT Hardware module.
 * The password is required for most Watchdog timer (WDT) APIs and can be stored locally in the caller function
 * or in a global variable in the application memory.
 *
 * \retval uint16 The current (Application specific) password for the Watchdog module.
 */
IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);

/**
 * \brief SCUWDT API to fetch the current password of the Safety Watchdog module.
 *
 * This API retrieves the current password for the Safety Watchdog (WDT) hardware module.
 * The password is required for most Watchdog timer (WDT) related operations and can be stored locally or globally
 * for subsequent use in WDT API calls.
 *
 * \retval uint16 The current password for the Safety Watchdog module.
 */
IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);

/**
 * \brief Services the CPU Watchdog functionality by reloading the Watchdog Timer.
 *
 * This API must be called periodically to ensure the CPU Watchdog does not expire.
 * The provided password is used to authenticate the service request.
 * The password must be obtained using \ref IfxScuWdt_getCpuWatchdogPassword and stored locally in caller function.
 *
 * \param[in] password The 16-bit password required to service the CPU Watchdog.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);

/**
 * \brief Services the Safety Watchdog functionality by reloading the timer.
 *
 * This API is used to service the Safety Watchdog Timer (SWDT) module. It must be called periodically
 * to prevent the watchdog from expiring and triggering a system reset.
 * The password must be obtained using \ref IfxScuWdt_getSafetyWatchdogPassword and stored locally in caller function.
 *
 * \param[in] password The 16-bit password for the Safety Watchdog module.
 *                     Range: 0x0000 to 0xFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);

/**
 * \brief Retrieves the current operational status of the CPU Watchdog module.
 * 
 * This function provides the status information of the CPU Watchdog, which can be used to determine
 * if the watchdog is active, expired, or in a specific state.
 *
 * \retval uint8 The current status of the CPU Watchdog module. The specific bit-field definitions
 * 				 depend on the implementation but generally indicate whether the watchdog is enabled,
 * 				 expired, or in a reset state.
 */
IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);

/** \} */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Enables the Watchdog functionality while ensuring the debugger is connected. The debug interface will also be enabled if it is not already enabled.
 *
 * This function allows the watchdog to remain enabled even when the debugger is connected and active. It ensures that the watchdog functionality is not disabled during debugging sessions.
 *
 * \retval TRUE  Operation was successful.
 *         FALSE Operation failed.
 */
IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
    {}
}


IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
{
    /* Clear EndInit Watch-dog*/
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);

    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
    {}
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
    {}
}


IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
{
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
    password ^= 0x003F;

    return password;
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
}


IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
{
    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */

    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
    return password;
}


IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
{
    return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
}


IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
{
    uint16        password;
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
    password ^= 0x003F;

    return password;
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
    {}
}


IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password)
{
    /* Set EndInit Watch-dog*/
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);

    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
    {}
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
    {}
}


#endif /* IFXSCUWDT_H */
