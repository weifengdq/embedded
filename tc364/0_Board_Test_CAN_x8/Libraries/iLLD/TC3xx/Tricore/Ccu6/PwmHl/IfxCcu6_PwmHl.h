/**
 * \file IfxCcu6_PwmHl.h
 * \brief CCU6 PWMHL details
 * \ingroup IfxLld_Ccu6
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup  IfxLld_Ccu6_PwmHl_Usage How to use the CCU6 PWM Driver
 * \ingroup  IfxLld_Ccu6_PwmHl
 *
 * This driver implements the PWM functionalities as defined by \ref library_srvsw_stdif_pwmhl.
 * The user is free to use either the driver specific APIs below or to used the \ref library_srvsw_stdif_pwmhl "standard interface APIs".
 *
 * \section Specific Specific implementation
 * \todo add documentation
 *
 * For a detailed configuration of the microcontroller, see \ref IfxCcu6_PwmHl_init().
 *
 * \defgroup IfxLld_Ccu6_PwmHl PWM Interface Driver
 * \ingroup IfxLld_Ccu6
 * \defgroup IfxLld_Ccu6_PwmHl_DataStructures Data Structures
 * \ingroup IfxLld_Ccu6_PwmHl
 * \defgroup IfxLld_Ccu6_PwmHl_PwmHl_Functions PwmHl Functions
 * \ingroup IfxLld_Ccu6_PwmHl
 * \defgroup IfxLld_Ccu6_PwmHl_StdIf_Functions StdIf Functions
 * \ingroup IfxLld_Ccu6_PwmHl
 */

#ifndef IFXCCU6_PWMHL_H
#define IFXCCU6_PWMHL_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Ccu6/TimerWithTrigger/IfxCcu6_TimerWithTrigger.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Maximal number of channels handled by the driver. One channel has a top and bottom pwm output
 */
#define IFXCCU6_PWMHL_MAX_CHANNELS (3)

/******************************************************************************/
/*------------------------------Type Definitions------------------------------*/
/******************************************************************************/

typedef struct IfxCcu6_PwmHl_s IfxCcu6_PwmHl;

typedef void                 (*IfxCcu6_PwmHl_Update)(IfxCcu6_PwmHl *driver, Ifx_TimerValue *tOn);

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Ccu6_PwmHl_DataStructures
 * \{ */
/** \brief Multi-channels PWM object definition (channels only)
 */
typedef struct
{
    Ifx_TimerValue  deadtime;               /**< \brief Dead time between the top and bottom channel in ticks */
    Ifx_TimerValue  minPulse;               /**< \brief minimum pulse that is output, shorter pulse time will be output as 0% duty cycle */
    Ifx_TimerValue  maxPulse;               /**< \brief internal parameter */
    Ifx_Pwm_Mode    mode;                   /**< \brief actual PWM mode */
    sint8           setMode;                /**< \brief A non zero flag indicates that the PWM mode is being modified */
    Ifx_ActiveState ccxActiveState;         /**< \brief Top PWM active state */
    Ifx_ActiveState coutxActiveState;       /**< \brief Bottom PWM active state */
    boolean         inverted;               /**< \brief Flag indicating the center aligned inverted mode (TRUE) */
    uint8           channelCount;           /**< \brief Number of PWM channels, one channel is made of a top and bottom channel */
} IfxCcu6_PwmHl_Base;

/** \} */

/** \brief Multi-channels PWM object configuration */
typedef struct
{
    float32            deadtime;            /**< \brief Dead time between the top and bottom channels in seconds */
    float32            minPulse;            /**< \brief Min pulse allowed as active state for the top and bottom PWM in seconds */
    uint8              channelCount;        /**< \brief Number of PWM channels, one channel is made of a top and bottom channel */
    boolean            emergencyEnabled;    /**< \brief Specifies if the emergency stop should be enabled or not */

    IfxPort_OutputMode outputMode;          /**< \brief Output mode of ccx and coutx pins */
    IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver of ccx and coutx pins */
    Ifx_ActiveState    ccxOutputEnabled;
    Ifx_ActiveState    coutxOutputEnabled;
    Ifx_ActiveState    ccxActiveState;      /**< \brief Top PWM active state */
    Ifx_ActiveState    coutxActiveState;    /**< \brief Bottom PWM active state */
} IfxCcu6_PwmHl_ChannelConfig;

/** \addtogroup IfxLld_Ccu6_PwmHl_DataStructures
 * \{ */
/** \brief CCU6: PWM HL configuration
 */
typedef struct
{
    IfxCcu6_PwmHl_ChannelConfig     base;        /**< \brief PWM HL standard interface configuration */
    IfxCcu6_TimerWithTrigger *timer;       /**< \brief Pointer to the linked timer object */
    IfxCcu6_Cc60_Out         *cc0;         /**< \brief CC0 channel used */
    IfxCcu6_Cc61_Out         *cc1;         /**< \brief CC1 channel used */
    IfxCcu6_Cc62_Out         *cc2;         /**< \brief CC2 channel used */
    IfxCcu6_Cout60_Out       *cout0;       /**< \brief COUT0 channel used */
    IfxCcu6_Cout61_Out       *cout1;       /**< \brief COUT1 channel used */
    IfxCcu6_Cout62_Out       *cout2;       /**< \brief COUT2 channel used */
} IfxCcu6_PwmHl_Config;

/** \brief Structure for PWM configuration
 */
typedef struct
{
    Ifx_Pwm_Mode         mode;           /**< \brief pwm mode */
    boolean              inverted;       /**< \brief Inverted configuration for the selected mode */
    IfxCcu6_PwmHl_Update update;         /**< \brief update call back function for the selected mode */
} IfxCcu6_PwmHl_Mode;

/** \brief CCU6 PWM driver
 */
struct IfxCcu6_PwmHl_s
{
    IfxCcu6_PwmHl_Base        base;         /**< \brief Multi-channels PWM object definition (channels only) */
    IfxCcu6_TimerWithTrigger *timer;        /**< \brief Pointer to the linked timer object */
    IfxCcu6_PwmHl_Update      update;       /**< \brief Update function for actual selected mode */
};

/** \} */

/** \addtogroup IfxLld_Ccu6_PwmHl_PwmHl_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Initializes the module with default configuration.
 * \note To ensure that the channels counter are reset by the timer and do not overflow, leading to random signal on the output, the timer must be started before the call to this function.
 *   Initializes the CCU6 module for PWM generation of high- and low switches usage, e.g.
 * - electric motor drive
 * - half-bridge switches
 *
 * It is assumed that the whole CCU6 module is only used for purposes mentioned at the
 * IfxCcu6_PwmHl API. No part of CCU6 module is used for other purpose.
 *
 * The timer used should configure the T12 as PWM base timer and T13 as trigger.
 * \param[in] driver Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in] config Pointer to the configuration structure to be initialized.
 *
 * \retval TRUE on success else FALSE.
 */
IFX_EXTERN boolean IfxCcu6_PwmHl_init(IfxCcu6_PwmHl *driver, const IfxCcu6_PwmHl_Config *config);

/**
 * \brief Initializes the PWMHL configuration structure to default values.
 *
 * \param[inout] config Pointer to the configuration structure to be initialized.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_PwmHl_initConfig(IfxCcu6_PwmHl_Config *config);

/** \} */

/** \addtogroup IfxLld_Ccu6_PwmHl_StdIf_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Inverts the active state of a PWM signal.
 *
 * \param[in] activeState The current active state of the PWM signal.
 *
 * \retval Ifx_ActiveState: The inverted active state of the PWM signal.
 *                          Range: \ref Ifx_ActiveState.
 */
IFX_INLINE Ifx_ActiveState IfxCcu6_PwmHl_invertActiveState(Ifx_ActiveState activeState);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Returns the dead time of the PWM signal.
 *
 * \param[in] driver Pointer to the IfxCcu6_PwmHl module handle.
 *
 * \retval float32 The dead time value in seconds.
 */
IFX_EXTERN float32 IfxCcu6_PwmHl_getDeadtime(IfxCcu6_PwmHl *driver);

/**
 * \brief Returns the minimum pulse width supported by the PWM driver.
 *
 * \param[in] driver Pointer to the IfxCcu6_PwmHl module handle.
 *
 * \retval float32 Minimum pulse width in seconds.
 */
IFX_EXTERN float32 IfxCcu6_PwmHl_getMinPulse(IfxCcu6_PwmHl *driver);

/**
 * \brief Returns the current PWM mode of the CCU6 PWM driver.
 *
 * \param[in] driver Pointer to the IfxCcu6_PwmHl module handle.
 *
 * \retval Ifx_Pwm_Mode The current PWM mode.
 *         Range: \Ref Ifx_Pwm_Mode.
 */
IFX_EXTERN Ifx_Pwm_Mode IfxCcu6_PwmHl_getMode(IfxCcu6_PwmHl *driver);

/**
 * \brief Sets the dead time for the PWM driver.
 *
 * \param[inout] driver    Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in]    deadtime  Dead time value to be set
 *
 * \retval TRUE  The dead time is successfully set.
 *         FALSE The dead time setting failed.
 */
IFX_EXTERN boolean IfxCcu6_PwmHl_setDeadtime(IfxCcu6_PwmHl *driver, float32 deadtime);

/**
 * \brief Sets the minimum pulse supported by the PWM driver.
 *
 * \param[inout] driver   Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in]    minPulse Minimum pulse
 *
 * \retval TRUE on success else FALSE.
 *
 */
IFX_EXTERN boolean IfxCcu6_PwmHl_setMinPulse(IfxCcu6_PwmHl *driver, float32 minPulse);

/**
 * \brief Sets the PWM mode, which is applied after setOnTime() and applyUpdate() are called.
 *
 * \param[inout] driver  Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in]    mode    The PWM mode to be set.
 *
 * \retval TRUE  The mode is successfully set.
 *         FALSE The mode setting failed.
 */
IFX_EXTERN boolean IfxCcu6_PwmHl_setMode(IfxCcu6_PwmHl *driver, Ifx_Pwm_Mode mode);

/** \brief Sets the ON time
 *
 * Assign the ON time to the TOP channels.
 * The ON time of the BOTTOM channels are complementary.
 *
 * \note The changes are not applied until Timer->applyUpdate() is called.
 *
 * \param[in]  driver Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in]  tOn    ON time
 *
 * \retval None
 *
 * \note
 * Period = 12
 * Ton    = 2
 * Center-aligned (the CCx equals CC6xST):
 *    T12PR  = (Period/2)-1
 *    T12    = 0 1 2 3 4 5 6 5 4 3 2  1  0 1 2 3
 *    CC6xR  = (Period - Ton) / 2 = 5
 *    CC6xST = 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0
 * Right-aligned (the CCx equals CC6xST):
 *    T12PR  = (Period-1)
 *    T12    = 0 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3
 *    CC6xR  = (Period - Ton) = 10
 *    CC6xST = 1 0 0 0 0 0 0 0 0 0 0  1  1 0 0 0
 * Left-aligned (the CCx equals ~CC6xST):
 *    T12PR  = (Period-1)
 *    T12    = 0 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3
 *    CC6xR  = Ton = 2
 *    CC6xST = 1 0 0 1 1 1 1 1 1 1 1  1  1 0 0 0
 */
IFX_EXTERN void IfxCcu6_PwmHl_setOnTime(IfxCcu6_PwmHl *driver, Ifx_TimerValue *tOn);

/**
 * \brief Configures the PWM channels for the CCU6 PWM driver, specifying which channels are active and their stuck-at states.
 *
 * This function sets up the PWM channels by enabling or disabling their PWM generation and configuring their stuck-at states.
 * The channels are indexed according to their phase and position (top or bottom).
 *
 * \param[in] driver   Pointer to the IfxCcu6_PwmHl module handle.
 * \param[in] activeCh Pointer to a boolean array where each element determines if the corresponding channel is active.
 *                     - TRUE: The channel generates PWM.
 *                     - FALSE: The channel is in a stuck-at state.
 * \param[in] stuckSt  Pointer to a boolean array where each element determines the stuck-at state level for active channels.
 *                     - TRUE: Stuck-at state is active level.
 *                     - FALSE: Stuck-at state is passive level.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_PwmHl_setupChannels(IfxCcu6_PwmHl *driver, boolean *activeCh, boolean *stuckSt);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE Ifx_ActiveState IfxCcu6_PwmHl_invertActiveState(Ifx_ActiveState activeState)
{
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
}


#endif /* IFXCCU6_PWMHL_H */
