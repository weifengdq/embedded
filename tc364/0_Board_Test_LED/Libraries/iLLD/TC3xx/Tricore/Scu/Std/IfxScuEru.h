/**
 * \file IfxScuEru.h
 * \brief SCU  basic functionality
 * \ingroup IfxLld_Scu
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Scu SCU
 * \addtogroup IfxLld_Scu
 * \{
 * \defgroup IfxLld_ScuEru How to use the Scu Eru driver?
 * \addtogroup IfxLld_ScuEru
 * \{
 *
 * The SCU ERU (External Request Unit) driver provides functionality to configure and handle external events triggered by input pins.
 * It allows generating output triggers based on specific input events, such as rising or falling edges, and provides interrupt-based handling for these events.
 *
 * In the following sections it will be described, how to integrate the driver into the application framework.
 *
 * \section IfxLld_ScuEru_Std_Preparation Preparation
 * \subsection IfxLld_ScuEru_Std_Include Include Files
 *
 * Include following header file into your C code:
 *
 * \code
 * #include <Scu/Std/IfxScuEru.h>
 * \endcode
 *
 * \subsection IfxLld_ScuEru_Std_Interrupt Interrupt Handler Installation
 *
 * See also \ref IfxLld_Cpu_Irq_Usage
 *
 * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
 * \code
 * // Priorities are normally defined in Ifx_IntPrioDef.h
 * #define ISR_PRIORITY_SCUERU_0 1
 * \endcode
 *
 * Add the interrupt service routines to your C code. They have to call the ScuEru interrupt handlers by passing the ScuEru handle:
 * \code
 * IFX_INTERRUPT(ISR_ScuEru, 0, ISR_PRIORITY_SCUERU_0);
 * \endcode
 *
 * \subsection IfxLld_ScuEru_Std_Init Module Initialisation
 *
 * The External Request Unit (ERU) request pin initialisation with the specified input mode can be done in the same function. Here is an example:
 *
 * \code
 * // Disable interrupts
 * boolean interruptState = IfxCpu_disableInterrupts();
 *
 * // Select external request pin
 * IfxScuEru_initReqPin(reqPin, IfxPort_InputMode_pullUp);
 *
 * // Initialize this pin with pull-up enabled
 * //this function will also configure the input multiplexers of the ERU (EICRm.EXISx)
 * IfxScuEru_InputChannel inputChannel = (IfxScuEru_InputChannel)reqPin->channelId;
 *
 * // Signal destination
 * IfxScuEru_InputNodePointer triggerSelect = IfxScuEru_InputNodePointer_0;
 * IfxScuEru_OutputChannel    outputChannel = IfxScuEru_OutputChannel_0;
 *
 * // Input channel configuration
 * IfxScuEru_disableFallingEdgeDetection(inputChannel);
 * IfxScuEru_enableRisingEdgeDetection(inputChannel);
 * IfxScuEru_enableAutoClear(inputChannel);
 *
 * // Connecting Matrix, Event Trigger Logic ETL block
 * IfxScuEru_enableTriggerPulse(inputChannel);
 * IfxScuEru_connectTrigger(inputChannel, triggerSelect);
 *
 * // Output channels, OutputGating Unit (OGU) block
 * IfxScuEru_setFlagPatternDetection(outputChannel, inputChannel, TRUE);
 * IfxScuEru_enablePatternDetectionTrigger(outputChannel);
 * IfxScuEru_setInterruptGatingPattern(outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
 *
 * // Service request configuration
 * {
 *      volatile Ifx_SRC_SRCR *src = &MODULE_SRC.SCU.SCUERU[(int)outputChannel % 4];
 *      IfxSrc_init(src, ISR_PROVIDER_SCUERU_0, ISR_PRIORITY_SCUERU_0);
 *      IfxSrc_enable(src);
 * }
 *
 * // Enable interrupts again
 * IfxCpu_restoreInterrupts(interruptState);
 * \endcode
 *
 * Scu Eru is now initialised and running.
 *
 * \}
 * \}
 *
 * \defgroup IfxLld_Scu_Std_Eru Eru Basic Functionality
 * \ingroup IfxLld_Scu_Std
 * \defgroup IfxLld_Scu_Std_Eru_Enum ERU: Enumerations
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_External_Request_Selection ERU: External Request Selection
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_Event_Trigger_Logic ERU: Event Trigger Logic
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_Connecting_Matrix ERU: Connecting Matrix
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_Output_Gating_Unit ERU: Output Gating Unit
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_Data_Structures ERU: Data Structures
 * \ingroup IfxLld_Scu_Std_Eru
 * \defgroup IfxLld_Scu_Std_Eru_Input_Filtering ERU: Input Filtering
 * \ingroup IfxLld_Scu_Std_Eru
 */

#ifndef IFXSCUERU_H
#define IFXSCUERU_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxScu_cfg.h"
#include "IfxScu_reg.h"
#include "Cpu/Std/IfxCpu.h"
#include "_PinMap/IfxScu_PinMap.h"
#include "Scu/Std/IfxScuWdt.h"

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Scu_Std_Eru_Enum
 * \{ */
/** \brief Input line selection for input channel\n
 * Definition in Ifx_SCU.EICR[i].B.EXIS(j) (i = 0,1,2,3 and j = 0,1)
 */
typedef enum
{
    IfxScuEru_ExternalInputSelection_0 = 0,      /**< \brief External input 0 is selected  */
    IfxScuEru_ExternalInputSelection_1,          /**< \brief External input 1 is selected  */
    IfxScuEru_ExternalInputSelection_2,          /**< \brief External input 2 is selected  */
    IfxScuEru_ExternalInputSelection_3,          /**< \brief External input 3 is selected  */
    IfxScuEru_ExternalInputSelection_4,          /**< \brief External input 4 is selected  */
    IfxScuEru_ExternalInputSelection_5           /**< \brief External input 5 is selected  */
} IfxScuEru_ExternalInputSelection;

/** \brief Input channel for input selection  and conditioning of trigger or gating functions
 */
typedef enum
{
    IfxScuEru_InputChannel_0 = 0,      /**< \brief External Input channel 0  */
    IfxScuEru_InputChannel_1,          /**< \brief External Input channel 1  */
    IfxScuEru_InputChannel_2,          /**< \brief External Input channel 2  */
    IfxScuEru_InputChannel_3,          /**< \brief External Input channel 3  */
    IfxScuEru_InputChannel_4,          /**< \brief External Input channel 4  */
    IfxScuEru_InputChannel_5,          /**< \brief External Input channel 5  */
    IfxScuEru_InputChannel_6,          /**< \brief External Input channel 6  */
    IfxScuEru_InputChannel_7           /**< \brief External Input channel 7  */
} IfxScuEru_InputChannel;

/** \brief Digital Glitch Filter Clock Depth determines the number of port input samples considered\n
 * in the calculation of the floating average digital filter output for all enabled FLRQ filters.\n
 * Definition in Ifx_SCU.EIFILT.B.DEPTH
 */
typedef enum
{
    IfxScuEru_InputFilterDepth_disable = 0,  /**< \brief Disable all glitch filtering */
    IfxScuEru_InputFilterDepth_1,            /**< \brief glitch filter depth 1  */
    IfxScuEru_InputFilterDepth_2,            /**< \brief glitch filter depth 2  */
    IfxScuEru_InputFilterDepth_3,            /**< \brief glitch filter depth 3  */
    IfxScuEru_InputFilterDepth_4,            /**< \brief glitch filter depth 4  */
    IfxScuEru_InputFilterDepth_5,            /**< \brief glitch filter depth 5  */
    IfxScuEru_InputFilterDepth_6,            /**< \brief glitch filter depth 6  */
    IfxScuEru_InputFilterDepth_7,            /**< \brief glitch filter depth 7  */
    IfxScuEru_InputFilterDepth_8,            /**< \brief glitch filter depth 8  */
    IfxScuEru_InputFilterDepth_9,            /**< \brief glitch filter depth 9  */
    IfxScuEru_InputFilterDepth_10,           /**< \brief glitch filter depth 10  */
    IfxScuEru_InputFilterDepth_11,           /**< \brief glitch filter depth 11  */
    IfxScuEru_InputFilterDepth_12,           /**< \brief glitch filter depth 12  */
    IfxScuEru_InputFilterDepth_13,           /**< \brief glitch filter depth 13  */
    IfxScuEru_InputFilterDepth_14,           /**< \brief glitch filter depth 14  */
    IfxScuEru_InputFilterDepth_15            /**< \brief glitch filter depth 15  */
} IfxScuEru_InputFilterDepth;

/** \brief Digital Glitch Filter Clock Predivider to generate the digital filter sample clock\n
 * Definition in Ifx_SCU.EIFILT.B.FILTDIV
 */
typedef enum
{
    IfxScuEru_InputFilterPredivider_disable = 0,  /**< \brief Disable all glitch filtering */
    IfxScuEru_InputFilterPredivider_1,            /**< \brief glitch filter predivider 1  */
    IfxScuEru_InputFilterPredivider_2,            /**< \brief glitch filter predivider 2  */
    IfxScuEru_InputFilterPredivider_3,            /**< \brief glitch filter predivider 3  */
    IfxScuEru_InputFilterPredivider_4,            /**< \brief glitch filter predivider 4  */
    IfxScuEru_InputFilterPredivider_5,            /**< \brief glitch filter predivider 5  */
    IfxScuEru_InputFilterPredivider_6,            /**< \brief glitch filter predivider 6  */
    IfxScuEru_InputFilterPredivider_7,            /**< \brief glitch filter predivider 7  */
    IfxScuEru_InputFilterPredivider_8,            /**< \brief glitch filter predivider 8  */
    IfxScuEru_InputFilterPredivider_9,            /**< \brief glitch filter predivider 9  */
    IfxScuEru_InputFilterPredivider_10,           /**< \brief glitch filter predivider 10  */
    IfxScuEru_InputFilterPredivider_11,           /**< \brief glitch filter predivider 11  */
    IfxScuEru_InputFilterPredivider_12,           /**< \brief glitch filter predivider 12  */
    IfxScuEru_InputFilterPredivider_13,           /**< \brief glitch filter predivider 13  */
    IfxScuEru_InputFilterPredivider_14,           /**< \brief glitch filter predivider 14  */
    IfxScuEru_InputFilterPredivider_15            /**< \brief glitch filter predivider 15  */
} IfxScuEru_InputFilterPredivider;

/** \brief Digital port pin selection for input filter\n
 * Definition in Ifx_SCU.EIFILT.B.FILRQ(i)(j) (i = 0 to7 and j = A, B, C, D)
 */
typedef enum
{
    IfxScuEru_InputFilterRequestSelection_0A,  /**< \brief REQ0A */
    IfxScuEru_InputFilterRequestSelection_5A,  /**< \brief REQ5A */
    IfxScuEru_InputFilterRequestSelection_2A,  /**< \brief REQ2A */
    IfxScuEru_InputFilterRequestSelection_3A,  /**< \brief REQ3A */
    IfxScuEru_InputFilterRequestSelection_0C,  /**< \brief REQ0C */
    IfxScuEru_InputFilterRequestSelection_1C,  /**< \brief REQ1C */
    IfxScuEru_InputFilterRequestSelection_3C,  /**< \brief REQ3C */
    IfxScuEru_InputFilterRequestSelection_2C,  /**< \brief REQ2C */
    IfxScuEru_InputFilterRequestSelection_4A,  /**< \brief REQ4A */
    IfxScuEru_InputFilterRequestSelection_6A,  /**< \brief REQ6A */
    IfxScuEru_InputFilterRequestSelection_1A,  /**< \brief REQ1A */
    IfxScuEru_InputFilterRequestSelection_7A,  /**< \brief REQ7A */
    IfxScuEru_InputFilterRequestSelection_6D,  /**< \brief REQ6D */
    IfxScuEru_InputFilterRequestSelection_4D,  /**< \brief REQ4D */
    IfxScuEru_InputFilterRequestSelection_2D,  /**< \brief REQ2D */
    IfxScuEru_InputFilterRequestSelection_3D,  /**< \brief REQ3D */
    IfxScuEru_InputFilterRequestSelection_7C   /**< \brief REQ7C */
} IfxScuEru_InputFilterRequestSelection;

/** \brief Determines the destination (output channel) for trigger event (if enabled by Ifx_SCU.EICR[i].B.EIEN(j)).\n
 * Definition in Ifx_SCU.EICR[i].B.INP(j) (i = 0,1,2,3 and j = 0,1)
 */
typedef enum
{
    IfxScuEru_InputNodePointer_0 = 0,      /**< \brief Event from input ETLx triggers output OGU0 (signal TRx0)  */
    IfxScuEru_InputNodePointer_1,          /**< \brief Event from input ETLx triggers output OGU1 (signal TRx1)  */
    IfxScuEru_InputNodePointer_2,          /**< \brief Event from input ETLx triggers output OGU2 (signal TRx2)  */
    IfxScuEru_InputNodePointer_3,          /**< \brief Event from input ETLx triggers output OGU3 (signal TRx3)  */
    IfxScuEru_InputNodePointer_4,          /**< \brief Event from input ETLx triggers output OGU4 (signal TRx4)  */
    IfxScuEru_InputNodePointer_5,          /**< \brief Event from input ETLx triggers output OGU5 (signal TRx5)  */
    IfxScuEru_InputNodePointer_6,          /**< \brief Event from input ETLx triggers output OGU6 (signal TRx6)  */
    IfxScuEru_InputNodePointer_7           /**< \brief Event from input ETLx triggers output OGU7 (signal TRx7)  */
} IfxScuEru_InputNodePointer;

/** \brief Determines the pattern detection influence on the ouput lines ERU_GOUTy and ERU_IOUTy\n
 * Definition in Ifx_SCU.IGCR[i].B.IGP(j) (i = 0,1,2,3 and j = 0,1)
 */
typedef enum
{
    IfxScuEru_InterruptGatingPattern_none         = 0,  /**< \brief IOUTy is inactive, (the pattern is not considered) */
    IfxScuEru_InterruptGatingPattern_alwaysActive = 1,  /**< \brief IOUTy is activated in response to a trigger event, (the pattern is not considered) */
    IfxScuEru_InterruptGatingPattern_patternMatch = 2,  /**< \brief IOUTy is activated if a trigger event occures while the pattern is present, (the pattern is considered) */
    IfxScuEru_InterruptGatingPattern_patternMiss  = 3   /**< \brief IOUTy is activated if a trigger event occures while the pattern is not present, (the pattern is not considered) */
} IfxScuEru_InterruptGatingPattern;

/** \brief Output channel for combination of events, definition of their effects and distribution to the system (interrupt generation, ...)
 */
typedef enum
{
    IfxScuEru_OutputChannel_0 = 0,      /**< \brief Output channel 0  */
    IfxScuEru_OutputChannel_1,          /**< \brief Output channel 1  */
    IfxScuEru_OutputChannel_2,          /**< \brief Output channel 2  */
    IfxScuEru_OutputChannel_3,          /**< \brief Output channel 3  */
    IfxScuEru_OutputChannel_4,          /**< \brief Output channel 4  */
    IfxScuEru_OutputChannel_5,          /**< \brief Output channel 5  */
    IfxScuEru_OutputChannel_6,          /**< \brief Output channel 6  */
    IfxScuEru_OutputChannel_7           /**< \brief Output channel 7  */
} IfxScuEru_OutputChannel;

/** \} */

/** \addtogroup IfxLld_Scu_Std_Eru_External_Request_Selection
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Initialises the External Request Unit (ERU) request pin with the specified input mode.
 *
 * This function configures the external request pin according to the given input mode.
 * It is used to set up the pin for receiving external requests in the specified input mode.
 *
 * \param[inout] req    Pointer to the external request pin configuration structure.
 * \param[in] inputMode The input mode to be configured for the external request pin.
 *                      This is of type \ref IfxPort_InputMode, which is an enumeration that
 *                      defines the possible input modes (e.g., PullUp, PullDown, etc.).
 *                      Range: \ref IfxPort_InputMode
 *
 * \retval None
 */
IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Determines which input line is selcted for input channel x
 *
 * This function configures the external input selection for the specified input channel, allowing the selection of different input lines for trigger or gating functions.
 *
 * \param[in] inputChannel Input channel for input selection  and conditioning of trigger or gating functions
 *                         Range: \ref IfxScuEru_InputChannel
 * \param[in] inputSignal  External input line to be selected for the input channel.
 *                         Range: \ref IfxScuEru_ExternalInputSelection
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Eru_Event_Trigger_Logic
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Clears the external event flag of input channel x (INTFx).
 *
 * This function resets all event flags to their inactive state, indicating that no events are pending.
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_clearAllEventFlags(void);

/**
 * \brief Clears the external event flag of input channel x (INTFx).
 *
 * This function resets the event flag associated with the given input channel,
 * thereby indicating that the event has been processed or acknowledged.
 *
 * \param[in] inputChannel Input channel identifier. This parameter specifies which input channel's event flag is to be cleared.
 * 						   Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Clears all the configuration for the given input channel x.
 *
 * This function resets the configuration of the given input channel x to its default state.
 *
 * \param[in] inputChannel Input channel for input selection and conditioning of trigger or gating functions.
 * 						   Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Disables the automatic clearing of INTFx when the edge of an unselected input channel is detected.
 *
 * This function disables the automatic clearing of the event flag for the given input channel.
 *
 * \param[in] inputChannel Input channel for input selection and conditioning of trigger or gating functions.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Disables the falling edge of input channel to set the bit INTF x.
 *
 * This function disables the falling edge of the given input channel.
 *
 * \param[in] inputChannel Input channel for input selection and conditioning of trigger or gating functions.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Disables the rising edge of input channel to set the bit INTF x.
 *
 * This function configures the SCU ERU module to ignore rising edge events on the specified input channel.
 *
 * \param[in] inputChannel The input channel to disable rising edge detection
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Enables automatic clearing of the INTFx flag when an edge is detected on an input channel that has not been selected.
 *
 * This function configures the specified input channel to automatically clear the INTFx flag upon detecting an edge on an unselected channel.
 * This is useful for managing interrupt handling in a more automated manner.
 *
 * \param[in] inputChannel The input channel to configure for automatic clearing.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Enables the falling edge of input channel to set the bit INTF x.
 *
 * This function configures the specified input channel to detect falling edges, which will set the corresponding INTF flag.
 *
 * \param[in] inputChannel Input channel for input selection  and conditioning of trigger or gating functions
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Enables the rising edge of input channel to set the bit INTF x.
 *
 * This function configures the specified input channel to detect rising edges and generate an interrupt when such an event occurs.
 *
 * \param[in] inputChannel The input channel to configure for rising edge detection.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Retrieves the status of the flags of all input channels.
 *
 * This function returns a bitmask representing the status of event flags for all input channels.
 * Each bit in the returned value corresponds to the status of a specific channel.
 *
 * \retval uint32 A 32-bit bitmask where each bit represents the status of an input channel's event flag.
 */
IFX_EXTERN uint32 IfxScuEru_getAllEventFlagsStatus(void);

/**
 * \brief Returns the status of the external event flag of input channel x (INTFx).
 *
 * This function checks whether the external event flag is set for the given input channel.
 *
 * \param[in] inputChannel The input channel to check the event flag status.
 * 						   Range: \ref IfxScuEru_InputChannel
 *
 * \retval TRUE  The external event flag is set.
 * \retval FALSE The external event flag is not set.
 */
IFX_EXTERN boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Returns all the configuration for the given input channel x.
 *
 * This function returns a 32-bit unsigned integer representing the configuration
 * of the input channel, which can be used to determine the current setup and
 * parameters applied to the channel.
 *
 * \param[in] inputChannel The input channel for which to retrieve the configuration.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval uint32 A 32-bit unsigned integer representing the input channel's configuration.
 */
IFX_EXTERN uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Sets the external event flag of input channel x (INTFx).
 *
 * This function triggers the external event for the given input channel, which can be used
 * to control or synchronize other functions or interrupts within the system.
 *
 * \param[in] inputChannel The input channel for which the event flag is to be set.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Eru_Connecting_Matrix
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Connects a trigger event to an output channel based on the input channel and trigger selection.
 *
 * This function determines the destination (output channel) for a trigger event if the trigger is enabled
 * by the corresponding EIEN bit in the EICR register (Ifx_SCU.EICR[i].B.EIEN(j), where i = 0,1,2,3 and j = 0,1).
 *
 * \param[in] inputChannel  Input channel for trigger or gating functions.
 * 			                Range: \ref IfxScuEru_InputChannel
 * \param[in] triggerSelect The trigger node pointer to be connected to the specified input channel. This parameter determines the trigger source for the input channel
 * 							Range: \ref IfxScuEru_InputNodePointer
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect);

/**
 * \brief Disables the generation of a trigger event for input channel x when the selected edge is detected.
 *
 * This function disables the generation of trigger pulses for the specified input channel, 
 * effectively stopping any associated event generation.
 *
 * \param[in] inputChannel Input channel for input selection and conditioning of trigger or gating functions.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Enables the generation of a trigger event for input channel x when the selected edge is detected.
 *
 * This function activates the trigger pulse generation for the given input channel.
 *
 * \param[in] inputChannel Input channel for input selection and conditioning of trigger or gating functions.
 *                         Range: \ref IfxScuEru_InputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel);

/**
 * \brief Enables or disables the flag INTFx to participate in pattern detection for output gating.
 *
 * This function configures the pattern detection flag for the specified output and input channels.
 *
 * \param[in] outputChannel The output channel for event combination and distribution. 
 * 							Range: \ref IfxScuEru_OutputChannel
 * \param[in] inputChannel  The input channel for trigger or gating functions.
 * 						    Range: \ref IfxScuEru_InputChannel
 * \param[in] state         Enable or disable the flag participation in pattern detection.
 *                          Range: TRUE: Enable (IPENjy = 1)
 *                  	    Range: FALSE Disable (IPENjy = 0)
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Eru_Output_Gating_Unit
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Clears all the configuration for the given input channel y
 *
 * This function resets the configuration of the given output channel to its default state.
 *
 * \param[in] outputChannel The output channel to be cleared.
 * 							Range: \ref IfxScuEru_OutputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel);

/**
 * \brief Disables the generation of a trigger event for output channel y when the result of the pattern detection changes.
 *
 * This function stops the trigger event from being generated for the given output channel when the pattern detection result changes.
 *
 * \param[in] outputChannel The output channel to disable the pattern detection trigger.
 *                        	Range: \ref IfxScuEru_OutputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel);

/**
 * \brief Enables the generation of a trigger event for output channel y when the result of the pattern detection changes.
 *
 * This function activates the pattern detection trigger mechanism for the given output channel. The pattern detection trigger is used
 * to detect specific signal patterns and generate an interrupt or event.
 *
 * \param[in] outputChannel Output channel for combination of events, definition of their effects, and distribution to the system (e.g., interrupt generation).
 *                			Range: \ref IfxScuEru_OutputChannel
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel);

/**
 * \brief Retrieves the Channel configuration of the specified output channel.
 *
 * This function retrieves the current Channel configuration of the given output channel.
 *
 * \param[in] outputChannel Output channel for which to retrieve the configuration.
 *                      	Range: \ref IfxScuEru_OutputChannel
 *
 * \retval uint32 The channel configuration of the specified output channel.
 */
IFX_EXTERN uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel);

/**
 * \brief Returns the status of the pattern detection result of output channel y (PDRy).
 *
 * This function retrieves the status of the pattern detection result for the given output channel.
 * The output channel is associated with the combination of events, their effects, and distribution
 * to the system, such as interrupt generation.
 *
 * \param[in] outputChannel Output channel for which to retrieve the configuration.
 *                      	Range: \ref IfxScuEru_OutputChannel
 *
 * \retval TRUE  A pattern has been detected on the specified output channel.
 * \retval FALSE No pattern has been detected on the specified output channel.
 */
IFX_EXTERN boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel);

/**
 * \brief Retrieves the whole pattern detection result across all selected output channels.
 *
 * This function returns the detected pattern as a bitmask, where each bit corresponds
 * to a specific output channel. A set bit indicates that the pattern was detected on
 * that channel.
 *
 * \retval uint32 A bitmask representing the pattern detection result across all
 *                selected output channels. Each bit in the result corresponds to an
 *                output channel, with a value of 1 indicating detection and 0
 *                indicating no detection.
 */
IFX_EXTERN uint32 IfxScuEru_getWholePatternDetectionResult(void);

/**
 * \brief Configures the interrupt gating pattern for a specified output channel to control the influence of pattern detection on the output lines GOUT and IOUT.
 *
 * This function configures the interrupt gating pattern for the specified output channel.
 *
 * \param[in] outputChannel Output channel for event combination and distribution to the system.
 *                        	Range: \ref IfxScuEru_OutputChannel
 * \param[in] gatingPattern Interrupt gating pattern defining how pattern detection affects the output lines GOUT and IOUT.
 *                          Specific pattern values are defined by the enum \ref IfxScuEru_InterruptGatingPattern enumeration.
 *                          Range: \ref IfxScuEru_InterruptGatingPattern
 *
 * \retval None
 */
IFX_EXTERN void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Eru_Input_Filtering
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Disables the input filter for the selected digital pin (REQxy)
 *
 * This function disables the input filter functionality for a specified digital port pin.
 * The selection of the pin is done via the \ref IfxScuEru_InputFilterRequestSelection enumeration.
 *
 * \param[in] requestSelection Digital port pin selection for input filter
 * 							   Range: \ref IfxScuEru_InputFilterRequestSelection
 *
 * \retval None
 */
IFX_INLINE void IfxScuEru_disableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection);

/**
 * \brief Enables the input filter for the selected digital pin (REQxy)
 *
 * This function configures the input filter for a specific digital port pin, allowing
 * the application to control noise filtering on input signals.
 *
 * \param[in] requestSelection Digital port pin selection for input filter.
 *                             This parameter selects the specific pin to enable the input filter for.
 *                             The possible values are defined by the \ref IfxScuEru_InputFilterRequestSelection
 *                             enumeration, which corresponds to the digital port pins defined in
 *                             Ifx_SCU.EIFILT.B.FILRQ(i)(j) (i = 0 to 7 and j = A, B, C, D).
 *                             Range: \ref IfxScuEru_InputFilterRequestSelection
 *
 * \retval None
 */
IFX_INLINE void IfxScuEru_enableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection);

/**
 * \brief Sets the digital glitch filter depth.
 *
 * This function configures the depth of the digital glitch filter, which determines
 * the number of input samples considered for calculating the filtered output.
 *
 * \param[in] depth Specifies the depth of the digital Glitch input filter to be set.
 * 			  		Range: \ref IfxScuEru_InputFilterDepth
 *
 * \retval None
 */
IFX_INLINE void IfxScuEru_setInputFilterDepth(IfxScuEru_InputFilterDepth depth);

/**
 * \brief Configures the digital glitch filter predivider to generate the digital filter sample clock.
 *
 * This function sets the predivider value for the digital glitch filter, which is used to divide the clock
 * source for the digital filter. The predivider value determines the sampling rate of the filter.
 *
 * \param[in] predivider The predivider value to be set. The value must be one of the enumerators from
 *             			 \ref IfxScuEru_InputFilterPredivider, with a range of 0 to 15. A value of 0 disables all glitch filter,
 *             			 while values 1 to 15 set the predivider factor accordingly.
 *             			 Range: \ref IfxScuEru_InputFilterPredivider
 *
 * \retval None
 */
IFX_INLINE void IfxScuEru_setInputFilterPredivider(IfxScuEru_InputFilterPredivider predivider);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuEru_disableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection)
{
    uint32 value    = 1 << requestSelection;
    uint16 password = IfxScuWdt_getSafetyWatchdogPasswordInline();
    IfxScuWdt_clearSafetyEndinitInline(password);

    SCU_EIFILT.U &= ~(value);
    IfxScuWdt_setSafetyEndinitInline(password);
}


IFX_INLINE void IfxScuEru_enableInputFilter(IfxScuEru_InputFilterRequestSelection requestSelection)
{
    uint32 value    = 1 << requestSelection;
    uint16 password = IfxScuWdt_getSafetyWatchdogPasswordInline();
    IfxScuWdt_clearSafetyEndinitInline(password);

    SCU_EIFILT.U |= value;
    IfxScuWdt_setSafetyEndinitInline(password);
}


IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
}


IFX_INLINE void IfxScuEru_setInputFilterDepth(IfxScuEru_InputFilterDepth depth)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPasswordInline();
    IfxScuWdt_clearSafetyEndinitInline(password);

    SCU_EIFILT.B.DEPTH = depth;
    IfxScuWdt_setSafetyEndinitInline(password);
}


IFX_INLINE void IfxScuEru_setInputFilterPredivider(IfxScuEru_InputFilterPredivider predivider)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPasswordInline();
    IfxScuWdt_clearSafetyEndinitInline(password);

    SCU_EIFILT.B.FILTDIV = predivider;
    IfxScuWdt_setSafetyEndinitInline(password);
}


#endif /* IFXSCUERU_H */
