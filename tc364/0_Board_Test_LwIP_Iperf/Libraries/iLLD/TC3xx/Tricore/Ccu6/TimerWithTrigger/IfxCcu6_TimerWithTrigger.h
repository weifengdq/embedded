/**
 * \file IfxCcu6_TimerWithTrigger.h
 * \brief CCU6 TIMERWITHTRIGGER details
 * \ingroup IfxLld_Ccu6
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Ccu6_TimerWithTrigger_Usage How to use the CCU6 TimerWithTrigger Interface driver?
 * \ingroup IfxLld_Ccu6_TimerWithTrigger
 * This driver implements the timer functionalities as defined by \ref library_srvsw_stdif_timer.
 * The user is free to use either the driver specific APIs below or to used the \ref library_srvsw_stdif_timer "standard interface APIs".
 *
 * \defgroup IfxLld_Ccu6_TimerWithTrigger TimerWithTrigger Interface driver
 * \ingroup IfxLld_Ccu6
 * \defgroup IfxLld_Ccu6_TimerWithTrigger_Data_Structures Data Structures
 * \ingroup IfxLld_Ccu6_TimerWithTrigger
 * \defgroup IfxLld_Ccu6_TimerWithTrigger_Timer_StdIf_Functions Timer StdIf Functions
 * \ingroup IfxLld_Ccu6_TimerWithTrigger
 * \defgroup IfxLld_Ccu6_TimerWithTrigger_Timer_Functions Timer Functions
 * \ingroup IfxLld_Ccu6_TimerWithTrigger
 */

#ifndef IFXCCU6_TIMERWITHTRIGGER_H
#define IFXCCU6_TIMERWITHTRIGGER_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_PinMap/IfxCcu6_PinMap.h"
#include "Ccu6/Std/IfxCcu6.h"



/** \brief Timer increment direction */
typedef enum
{
    IfxCcu6_Timer_CountDir_up,                      /**< \brief Timer is counting up */
    IfxCcu6_Timer_CountDir_upAndDown,               /**< \brief Timer is counting up and down */
    IfxCcu6_Timer_CountDir_down                     /**< \brief Timer is counting down */
} IfxCcu6_Timer_CountDir;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Ccu6_TimerWithTrigger_Data_Structures
 * \{ */
/** \brief Structure for the timer base
 */
typedef struct
{
    Ifx_TimerValue          period;               /**< \brief Timer period in ticks (cached value) */
    boolean                 triggerEnabled;       /**< \brief If TRUE, the trigger functionality is Initialised */
    float32                 clockFreq;            /**< \brief Timer input clock frequency (cached value) */
    IfxCcu6_Timer_CountDir countDir;             /**< \brief Timer counting mode */
} IfxCcu6_TimerWithTrigger_Base;

/** \} */

/** \brief CCU6 Timer interface
 */
typedef struct
{
    IfxCcu6_TimerWithTrigger_Base base;       /**< \brief Timer base structure */
    Ifx_CCU6                     *ccu6;       /**< \brief CCU6 module used for the timer functionality */
} IfxCcu6_TimerWithTrigger;

/** \brief Trigger configuration */
typedef struct
{
    boolean            enabled;             /**< \brief If true, the trigger functionality is Initialised, else ignored */
    Ifx_TimerValue     triggerPoint;        /**< \brief Trigger point in timer ticks */
    Ifx_Priority       isrPriority;         /**< \brief Interrupt isrPriority of the trigger interrupt, if 0 the interrupt is disable */
    IfxSrc_Tos         isrProvider;         /**< \brief Interrupt service provider for the trigger interrupt */
    IfxPort_OutputMode outputMode;          /**< \brief Output mode */
    IfxPort_PadDriver  outputDriver;        /**< \brief Output pad driver */
    boolean            risingEdgeAtPeriod;  /**< \brief Set the clock signal polarity, if TRUE, the rising edge is at the period, else at the trigger offset. When the timer is stopped, the output is set to high */
    boolean            outputEnabled;       /**< \brief If TRUE, the output pin is enabled, else disabled. In case the output is disabled, the output pin is not initialized. */
} IfxCcu6_TimerWithTrigger_TrigConfig;

/** \brief Timer configuration */
typedef struct
{
    float32                   frequency;     /**< \brief PWM frequency in Hz. This parameter is only used to initialise the timer structure. An additional cell is required to build the timer. */
    Ifx_Priority              isrPriority;   /**< \brief Interrupt isrPriority of the timer interrupt, if 0 the interrupt is disable */
    IfxSrc_Tos                isrProvider;   /**< \brief Interrupt service provider for the timer interrupt */
    float32                   minResolution; /**< \brief Minimum resolution of the timer in seconds. if 0, this parameter is ignored. If the configuration does not enable this setting a warning is given */
    IfxCcu6_TimerWithTrigger_TrigConfig trigger;       /**< \brief Trigger configuration */
    IfxCcu6_Timer_CountDir   countDir;      /**< \brief Timer counting mode */
    float32                   startOffset;   /**< \brief FIXME make startOffset as Ifx_TimerValue. Timer initial offset in % of the period */
} IfxCcu6_TimerWithTrigger_TimerConfig;


/** \brief Configuration structure for T12 and T13 Timer
 */
typedef struct
{
    IfxCcu6_TimerWithTrigger_TimerConfig  base;                      /**< \brief Standard interface timer configuration */
    Ifx_CCU6              *ccu6;                      /**< \brief CCU6 module used for the timer functionality */
    IfxCcu6_Cout63_Out    *triggerOut;
    IfxCcu6_ServiceRequest serviceReqNrPeriod;        /**< \brief Service request used for the period */
    IfxCcu6_ServiceRequest serviceReqNrTrigger;       /**< \brief Service request used for the Trigger */
} IfxCcu6_TimerWithTrigger_Config;

/** \addtogroup IfxLld_Ccu6_TimerWithTrigger_Timer_StdIf_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Acknowledges the timer interrupt request (IRQ) for the CCU6 Timer interface.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval TRUE  If the timer interrupt was successfully acknowledged.
 *         FALSE If the timer interrupt acknowledgment failed.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_acknowledgeTimerIrq(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Acknowledges the trigger interrupt for the CCU6 Timer.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval TRUE  If the trigger interrupt was successfully acknowledged.
 *         FALSE If the trigger interrupt acknowledgment failed.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_acknowledgeTriggerIrq(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Enable the transfer of the shadow registers
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_applyUpdate(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Disable the transfer of the shadow registers
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_disableUpdate(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Returns the frequency of the CCU6 Timer in Hz..
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval float32 The frequency in Hz.
 */
IFX_EXTERN float32 IfxCcu6_TimerWithTrigger_getFrequency(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Returns the input frequency of the CCU6 timer in Hz.
 *
 * This function retrieves the current input frequency of the timer. The input frequency
 * is based on the hardware configuration of the CCU6 module associated with the timer.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval float32 The input frequency of the timer in Hz.
 */
IFX_EXTERN float32 IfxCcu6_TimerWithTrigger_getInputFrequency(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Retrieves the period of the CCU6 Timer with trigger functionality.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval Ifx_TimerValue The current period value of the timer in timer units.
 *                        Range: 0 to 0xFFFF.
 */
IFX_EXTERN Ifx_TimerValue IfxCcu6_TimerWithTrigger_getPeriod(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Returns the resolution of the CCU6 Timer.
 *
 * This function retrieves the resolution of the timer, which represents the smallest measurable time interval.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval float32 The timer resolution in Hz. The value is always positive and indicates the granularity of the timer's measurements.
 *                 A higher resolution means more precise timing capability.
 */
IFX_EXTERN float32 IfxCcu6_TimerWithTrigger_getResolution(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Runs the timer, initiating its operation based on the configured settings.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_run(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Sets the frequency for the CCU6 Timer interface.
 *
 * \param[inout] driver    Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]    frequency The desired frequency to be set for the timer. Must be a positive value.
 *
 * \retval TRUE The frequency was successfully set.
 *         FALSE The frequency setting failed.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_setFrequency(IfxCcu6_TimerWithTrigger *driver, float32 frequency);

/**
 * \brief Sets the period for the timer
 *
 * \param[inout] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]    period Timer period value to be set
 *
 * \retval TRUE Period was successfully set.
 *         FALSE Failed to set the period.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_setPeriod(IfxCcu6_TimerWithTrigger *driver, Ifx_TimerValue period);

/**
 * \brief Sets the single shot mode of the timer
 *
 * \param[inout] driver  Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]    enabled If TRUE, enables single shot mode; if FALSE, disables it
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_setSingleMode(IfxCcu6_TimerWithTrigger *driver, boolean enabled);

/**
 * \brief Sets the trigger point for the timer.
 *
 * \param[inout] driver        Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]    triggerPoint  Timer value at which the trigger is activated.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_setTrigger(IfxCcu6_TimerWithTrigger *driver, Ifx_TimerValue triggerPoint);

/**
 * \brief Stops the timer.
 *
 * \param[inout] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_stop(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Updates the input frequency for the CCU6 Timer interface.
 *
 * \param[inout] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_updateInputFrequency(IfxCcu6_TimerWithTrigger *driver);

/** \} */

/** \addtogroup IfxLld_Ccu6_TimerWithTrigger_Timer_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Returns the base pointer to the timer channel registers.
 *
 * This function provides direct access to the timer channel registers for low-level operations.
 *
 * \param[in] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 *
 * \retval uint32 Base pointer to the timer channel registers.
 */
IFX_EXTERN volatile uint32 *IfxCcu6_TimerWithTrigger_getPointer(IfxCcu6_TimerWithTrigger *driver);

/**
 * \brief Initializes the timer object
 *
 * Configures T12 as a timer and optionally T13 as a trigger. The configuration aims to achieve maximum PWM
 * resolution by selecting appropriate T12CLK, T12PRE, and T12PR values.
 *\note that the requested T12 frequency should be the lowest PWM frequency to achieve maximum resolution.
 *
 * \param[out] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]  config Pointer to the configuration structure to be initialized.
 *
 * \retval TRUE Initialization successful.
 *         FALSE Initialization failed.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_init(IfxCcu6_TimerWithTrigger *driver, IfxCcu6_TimerWithTrigger_Config *config);

/**
 * \brief Initializes the CCU6 Timer with Trigger functionality.
 *
 * Configures T12 as a timer and optionally T13 as a trigger. Sets T12CLK, T12PRE, and T12PR to achieve maximum PWM resolution.
 *
 * \param[inout] driver Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]    config Pointer to the configuration structure to be initialized.
 *
 * \retval TRUE Initialization successful.
 *         FALSE Initialization failed.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_initTimer(IfxCcu6_TimerWithTrigger *driver, IfxCcu6_TimerWithTrigger_Config *config);

/**
 * \brief Initializes the timer trigger with T12 configured as timer
 *
 * \param[inout]  driver   Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in]     config   Pointer to the configuration structure to be initialized.
 *
 * \retval TRUE  Initialization successful.
 *         FALSE Initialization failed.
 *
 * \note To achieve maximum PWM resolution, the requested T12 frequency should be the lowest PWM frequency.
 */
IFX_EXTERN boolean IfxCcu6_TimerWithTrigger_initTrigger(IfxCcu6_TimerWithTrigger *driver, IfxCcu6_TimerWithTrigger_Config *config);

/**
 * \brief Initializes the timer interrupts for the CCU6 Timer interface.
 *
 * This function configures T12 as a timer and optionally configures T13 as a trigger.
 * The configuration ensures that T12CLK, T12PRE, and T12PR are set to achieve maximum PWM resolution.
 * Note that to achieve maximum PWM resolution, the requested T12 frequency should be the lowest PWM frequency.
 *
 * \param[in] driver   Pointer to the IfxCcu6_TimerWithTrigger module handle.
 * \param[in] config   Pointer to the configuration structure to be initialized.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_initInterrupt(IfxCcu6_TimerWithTrigger *driver, IfxCcu6_TimerWithTrigger_Config *config);

/**
 * \brief Initializes the configuration structure for the Timer with Trigger to default values.
 *
 * \param[inout]  config   Pointer to the configuration structure to be initialized.
 * \param[in]     ccu6     Pointer to the base of CCU6 registers.
 *
 * \retval None
 */
IFX_EXTERN void IfxCcu6_TimerWithTrigger_initConfig(IfxCcu6_TimerWithTrigger_Config *config, Ifx_CCU6 *ccu6);

/** \} */

#endif /* IFXCCU6_TIMERWITHTRIGGER_H */
