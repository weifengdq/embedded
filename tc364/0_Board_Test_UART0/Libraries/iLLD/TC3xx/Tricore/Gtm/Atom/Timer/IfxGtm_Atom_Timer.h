/**
 * \file IfxGtm_Atom_Timer.h
 * \brief GTM TIMER details
 * \ingroup IfxLld_Gtm
 *
 * \version iLLD_1_20_0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Gtm_Atom_Timer_Usage How to use the GTM ATOM Timer Driver
 * \ingroup IfxLld_Gtm_Atom_Timer
 *
 *   This driver implements the timer functionalities as defined by \ref library_srvsw_stdif_timer.
 *   The user is free to use either the driver specific APIs below or to used the \ref library_srvsw_stdif_timer "standard interface APIs".
 *
 * \section Specific Specific implementation
 *   Implementation is similar to \ref IfxLld_Gtm_Tom_Timer.
 *
 *
 *   For a detailed configuration of the microcontroller, see \ref IfxGtm_Atom_Timer_init().
 *
 * \section Example Usage example
 *   Initialisation:
 * \code
 *   IfxGtm_Atom_Timer_Config driverConfig;
 *   IfxGtm_Atom_Timer driverData;
 *   IfxStdIf_Timer timer;
 *   IfxGtm_Atom_Timer_initConfig(&driverConfig, &MODULE_GTM);
 *   IfxGtm_Atom_Timer_init (&driverData, &driverConfig);
 *    boolean IfxGtm_Atom_Timer_stdIfTimerInit(&timer, &driverData);
 * \endcode
 *
 *   During run-time, \ref library_srvsw_stdif_timer "the interface functions" should be used:
 * \code
 *   IfxStdIf_Timer_run(timer);
 *   IfxStdIf_Timer_disableUpdate(timer);
 *   IfxStdIf_Timer_setPeriod(timer, period);
 *  IfxStdIf_Timer_applyUpdate(timer);
 * \endcode
 *
 * \defgroup IfxLld_Gtm_Atom_Timer ATOM Timer Interface Driver
 * \ingroup IfxLld_Gtm_Atom
 * \defgroup IfxLld_Gtm_Atom_Timer_Timer_StdIf_Functions Timer StdIf Functions
 * \ingroup IfxLld_Gtm_Atom_Timer
 * \defgroup IfxLld_Gtm_Atom_Timer_Timer_Functions Timer Functions
 * \ingroup IfxLld_Gtm_Atom_Timer
 * \defgroup IfxLld_Gtm_Atom_Timer_Data_Structures Data Structures
 * \ingroup IfxLld_Gtm_Atom_Timer
 */

#ifndef IFXGTM_ATOM_TIMER_H
#define IFXGTM_ATOM_TIMER_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_PinMap/IfxGtm_PinMap.h"
#include "Gtm/Std/IfxGtm_Atom.h"
#include "Gtm/Std/IfxGtm_Cmu.h"
#include "Gtm/Std/IfxGtm_Dtm.h"
#include "StdIf/IfxStdIf_Timer.h"

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Gtm_Atom_Timer_Data_Structures
 * \{ */
/** \brief Structure for the timer base
 */
typedef struct
{
    Ifx_TimerValue          period;               /**< \brief Timer period in ticks (cached value) */
    boolean                 triggerEnabled;       /**< \brief If TRUE, the trigger functionality is Initialised */
    float32                 clockFreq;            /**< \brief Timer input clock frequency (cached value) */
    IfxStdIf_Timer_CountDir countDir;             /**< \brief Timer counting mode */
} IfxGtm_Atom_Timer_Base;

/** \} */

/** \addtogroup IfxLld_Gtm_Atom_Timer_Data_Structures
 * \{ */
/** \brief ATOM Timer interface
 */
typedef struct
{
    IfxGtm_Atom_Timer_Base base;                   /**< \brief Timer base structure */
    Ifx_GTM               *gtm;                    /**< \brief GTM module used for the timer functionality */
    Ifx_GTM_ATOM          *atom;                   /**< \brief ATOM used for the timer functionality */
    Ifx_GTM_ATOM_AGC      *agc;                    /**< \brief Pointer to the AGC object */
    IfxGtm_Atom            atomIndex;              /**< \brief Enum for ATOM objects */
    IfxGtm_Atom_Ch         timerChannel;           /**< \brief ATOM channel used for the timer */
    IfxGtm_Atom_Ch         triggerChannel;         /**< \brief ATOM channel used for the trigger, if identical to the timerChannel, the trigger interrupt is having the same interrupt level as  the timer interrupt */
    uint16                 channelsMask;           /**< \brief Mask for channels to be modified together */
    Ifx_TimerValue         offset;                 /**< \brief Timer initial offset in ticks */
    Ifx_GTM_CDTM_DTM      *dtm;                    /**< \brief Pointer to DTM object used by ATOM */
    IfxGtm_Dtm_Ch          dtmChannel;             /**< \brief DTM channel */
    uint32                 agcDisableUpdate;       /**< \brief AGC value for disable update */
    uint32                 agcApplyUpdate;         /**< \brief AGC value for apply update */
} IfxGtm_Atom_Timer;

/** \brief Configuration structure for ATOM Timer
 */
typedef struct
{
    IfxStdIf_Timer_Config  base;                 /**< \brief Standard interface timer configuration */
    Ifx_GTM               *gtm;                  /**< \brief GTM used for the timer functionality */
    IfxGtm_Atom            atom;                 /**< \brief ATOM used for the timer functionality */
    IfxGtm_Atom_Ch         timerChannel;         /**< \brief ATOM channel used for the timer */
    IfxGtm_Atom_ToutMap   *triggerOut;           /**< \brief ATOM channel used for the trigger output, can be identical to the timer channe */
    IfxGtm_Cmu_Clk         clock;                /**< \brief Timer input clock */
    IfxGtm_IrqMode         irqModeTimer;         /**< \brief Interrupt mode for the timer */
    IfxGtm_IrqMode         irqModeTrigger;       /**< \brief Interrupt mode for the trigger */
    IfxGtm_Dtm_ClockSource dtmClockSource;       /**< \brief DTM clock source */
    boolean                initPins;             /**< \brief TRUE: Initialize pins in driver
                                                  * FALSE: Don't initialize pins in driver : user handles separately */
} IfxGtm_Atom_Timer_Config;

/** \} */

/** \addtogroup IfxLld_Gtm_Atom_Timer_Timer_StdIf_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Returns the timer event.
 *
 * This function acknowledges and clears the timer interrupt that was triggered by the ATOM Timer.
 * It is typically called in an interrupt service routine (ISR) to signal that the interrupt has been processed.
 *
 * \param[inout] driver Pointer to the ATOM Timer interface handle. This structure contains the necessary
 * 			  		    configuration and state information for the timer, including the GTM module, ATOM object, and channel
 * 			  		    details used for timer functionality.
 *
 * \retval TRUE If the timer event occurred. FALSE,otherwise
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_acknowledgeTimerIrq(IfxGtm_Atom_Timer *driver);

/**
 * \brief Returns the trigger event.
 * 
 * This function acknowledges the trigger interrupt and returns the trigger event.
 * It is used to handle the interrupt triggered by the ATOM Timer module.
 *
 * \param[inout] driver Pointer to the ATOM Timer interface handle.
 *                      This handle contains the necessary information and configuration
 *                      for the ATOM Timer, including the base structure, GTM module,
 *                      ATOM object, and channel configurations.
 *
 * \retval TRUE If the trigger event occurred. FALSE,otherwise.
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_acknowledgeTriggerIrq(IfxGtm_Atom_Timer *driver);

/**
 * \brief Add a channel to the channel mask.
 * 
 * This function adds the specified channel to the channel mask of the ATOM Timer interface.
 * Channels present in the mask are started, stopped, or updated simultaneously when 
 * certain timer operations (\ref IfxGtm_Atom_Timer_applyUpdate, 
 * \ref IfxGtm_Atom_Timer_disableUpdate, \ref IfxGtm_Atom_Timer_stop, 
 * \ref IfxGtm_Atom_Timer_run) are performed.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 * \param[in]    channel Channel to be added to the mask.
 *					     Range: \ref IfxGtm_Atom_Ch
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_addToChannelMask(IfxGtm_Atom_Timer *driver, IfxGtm_Atom_Ch channel);

/**
 * \brief Applies the update to the ATOM Timer, enabling the transfer of shadow registers to the main registers.
 *
 * This function is used to synchronize the shadow register values with the actual timer registers,
 * ensuring that any updates made to the shadow registers are committed to the hardware.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_applyUpdate(IfxGtm_Atom_Timer *driver);

/**
 * \brief Disables the update of the ATOM timer.
 *
 * This function disables further updates to the ATOM timer, effectively freezing its current state.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_disableUpdate(IfxGtm_Atom_Timer *driver);

/**
 * \brief Retrieves the current frequency of the ATOM Timer.
 *
 * This function returns the operational frequency of the ATOM Timer in Hz.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 * 
 * \retval float32 The frequency of the timer in Hz.
 */
IFX_EXTERN float32 IfxGtm_Atom_Timer_getFrequency(IfxGtm_Atom_Timer *driver);

/**
 * \brief Retrieves the current input frequency of the ATOM Timer in Hz.
 *
 * This function returns the input frequency of the ATOM Timer interface, which is used for timing operations.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval float32 The input frequency of the timer in Hz. The value is always positive.
 */
IFX_EXTERN float32 IfxGtm_Atom_Timer_getInputFrequency(IfxGtm_Atom_Timer *driver);

/**
 * \brief Retrieves the period of the ATOM timer.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval Ifx_TimerValue The current period value of the timer in ticks.
 */
IFX_EXTERN Ifx_TimerValue IfxGtm_Atom_Timer_getPeriod(IfxGtm_Atom_Timer *driver);

/**
 * \brief Returns the resolution of the ATOM Timer.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval float32 The timer resolution.
 */
IFX_EXTERN float32 IfxGtm_Atom_Timer_getResolution(IfxGtm_Atom_Timer *driver);

/**
 * \brief Retrieves the trigger point value for the ATOM timer.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval Ifx_TimerValue The trigger point value in timer ticks.
 */
IFX_EXTERN Ifx_TimerValue IfxGtm_Atom_Timer_getTrigger(IfxGtm_Atom_Timer *driver);

/**
 * \brief Runs the ATOM Timer, initiating its operation based on the configured parameters.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_run(IfxGtm_Atom_Timer *driver);

/**
 * \brief Sets the specified frequency for the ATOM timer.
 *
 * \param[inout] driver    Pointer to the ATOM Timer interface handle.
 * \param[in]    frequency The desired frequency value to be set for the timer in Hz. Range: Must be a positive value (frequency > 0).
 *
 * \retval TRUE The frequency was successfully set. FALSE, otherwise.
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_setFrequency(IfxGtm_Atom_Timer *driver, float32 frequency);

/**
 * \brief Sets the period for the ATOM timer.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 * \param[in]    period  The new period value to be set for the timer, specified in timer ticks. Range: 0 to 0xFFFFFF
 *
 * \retval TRUE The period was successfully set. FALSE, otherwise.
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_setPeriod(IfxGtm_Atom_Timer *driver, Ifx_TimerValue period);

/**
 * \brief Sets the single shot mode of the timer.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 * \param[in]    enabled Boolean value indicating whether to enable (TRUE) or disable
 *                       (FALSE) the single shot mode.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_setSingleMode(IfxGtm_Atom_Timer *driver, boolean enabled);

/**
 * \brief Sets the trigger point for the ATOM timer.
 *
 * \param[inout] driver       Pointer to the ATOM Timer interface handle.
 * \param[in]    triggerPoint Trigger point value in timer ticks. Range: 0 to 0xFFFFFF
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_setTrigger(IfxGtm_Atom_Timer *driver, Ifx_TimerValue triggerPoint);

/**
 * \brief Initializes the standard interface timer with the specified driver configuration.
 *
 * \param[in,out] stdif Standard interface object that will be initialized by the function.
 * \param[in] driver Interface driver to be used by the standard interface. This driver must be initialized separately before calling this function.
 *
 * \retval TRUE If the initialization was successful.
 *         FALSE If the initialization failed.
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_stdIfTimerInit(IfxStdIf_Timer *stdif, IfxGtm_Atom_Timer *driver);

/**
 * \brief Stops the ATOM Timer functionality.
 *
 * This function halts the operation of the ATOM Timer, ensuring that no further timing events are generated.
 * The timer is controlled via the provided driver handle, which contains the necessary configuration and state information for the timer module.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_stop(IfxGtm_Atom_Timer *driver);

/**
 * \brief Updates the input frequency for the ATOM timer
 *
 * This function updates the input frequency used by the ATOM timer. It is part of the timer interface and is used to adjust the timer's input frequency based on the current configuration.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle.
 * 
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_updateInputFrequency(IfxGtm_Atom_Timer *driver);

/** \} */

/** \addtogroup IfxLld_Gtm_Atom_Timer_Timer_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/**
 * \brief Returns the initial timer offset value in ticks
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval Ifx_TimerValue The initial timer offset value in ticks
 */
IFX_EXTERN Ifx_TimerValue IfxGtm_Atom_Timer_getOffset(IfxGtm_Atom_Timer *driver);

/**
 * \brief Returns a pointer to the timer channel for the specified ATOM Timer driver.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval uint32* Pointer to the timer channel.
 */
IFX_EXTERN volatile uint32 *IfxGtm_Atom_Timer_getPointer(IfxGtm_Atom_Timer *driver);

/**
 * \brief Returns a pointer to the trigger channel.
 *
 * \param[in] driver  Pointer to the ATOM Timer interface handle.
 *
 * \retval uint32* Pointer to the trigger channel.
 */
IFX_EXTERN volatile uint32 *IfxGtm_Atom_Timer_getTriggerPointer(IfxGtm_Atom_Timer *driver);

/**
 * \brief Initializes the ATOM Timer interface with the provided configuration.
 *
 * This function sets up the timer object using the specified configuration parameters.
 * It prepares the timer to be used in subsequent operations.
 *
 * \param[inout] driver  Pointer to the ATOM Timer interface handle to be initialized.
 * \param[in]    config  The configuration structure containing the necessary settings for the timer.
 *
 * \retval TRUE If the initialization was successful.
 * 		   FALSE If the initialization failed.
 */
IFX_EXTERN boolean IfxGtm_Atom_Timer_init(IfxGtm_Atom_Timer *driver, const IfxGtm_Atom_Timer_Config *config);

/**
 * \brief Initializes the configuration structure to default values for ATOM Timer functionality.
 *
 * This function sets up the provided configuration structure with default values suitable
 * for initializing the ATOM Timer within the GTM module. The configuration structure
 * includes settings for timer channels, clock sources, interrupt modes, and other
 * timer-related parameters.
 *
 * \param[inout] config Configuration structure for ATOM Timer that will be initialized.
 * \param[in]    gtm    Pointer to the GTM module to be used for timer functionality.
 *
 * \retval None
 */
IFX_EXTERN void IfxGtm_Atom_Timer_initConfig(IfxGtm_Atom_Timer_Config *config, Ifx_GTM *gtm);

/** \} */

#endif /* IFXGTM_ATOM_TIMER_H */
